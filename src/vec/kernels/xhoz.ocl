void kernel sum (const ulong n, const __global number *in, __global number *out, __local number* lm) {
    const int wgs = get_local_size(0);
    const int lid = get_local_id(0);
    const int wgid = get_group_id(0);
    const int num_groups = get_num_groups(0);
    const int delta = wgs * num_groups;

    // Performs the first steps of the reduction
    number acc = 0;
    for (ulong id = wgid*wgs + lid; id < n; id += delta)
        acc += in[id];

    lm[lid] = acc;
    barrier(CLK_LOCAL_MEM_FENCE);

    // Performs reduction in local memory
    for (ulong s=wgs/2; s>0; s=s>>1) {
        if (lid < s)
            lm[lid] += lm[lid + s];
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Stores the per-workgroup result
    if (lid == 0)
        out[wgid] = lm[0];
}

void kernel prod (const ulong n, const __global number *in, __global number *out, __local number* lm) {
    const ulong wgs = get_local_size(0);
    const ulong lid = get_local_id(0);
    const ulong wgid = get_group_id(0);
    const ulong num_groups = get_num_groups(0);
    const ulong delta = wgs * num_groups;

    // Performs the first steps of the reduction
    number acc = 1;
    for (ulong id = wgid*wgs + lid; id < n; id += delta)
        acc *= in[id];

    lm[lid] = acc;
    barrier(CLK_LOCAL_MEM_FENCE);

    // Performs reduction in local memory
    for (ulong s=wgs/2; s>0; s=s>>1) {
        if (lid < s)
            lm[lid] *= lm[lid + s];
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Stores the per-workgroup result
    if (lid == 0)
        out[wgid] = lm[0];
}

void kernel dot_reg (const ulong n, const __global number *lhs, const __global number *rhs, __global number *out, __local number* lm) {
    const ulong wgs = get_local_size(0);
    const ulong lid = get_local_id(0);
    const ulong wgid = get_group_id(0);
    const ulong num_groups = get_num_groups(0);
    const ulong delta = wgs * num_groups;

    // Performs the first steps of the reduction
    number acc = 0;
    for (ulong id = wgid*wgs + lid; id < n; id += delta) {
        #if IS_FLOAT
        acc = fma(lhs[id], rhs[id], acc);
        #else
        acc += lhs[id] * rhs[id];
        #endif
    }

    lm[lid] = acc;
    barrier(CLK_LOCAL_MEM_FENCE);

    // Performs reduction in local memory
    for (ulong s=wgs/2; s>0; s=s>>1) {
        if (lid < s)
            lm[lid] += lm[lid + s];
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Stores the per-workgroup result
    if (lid == 0)
        out[wgid] = lm[0];
}

void kernel sum_epilogue (const __global number* input, __global number* sum, __local number* lm) {
    const ulong lid = get_local_id(0);
    const ulong wgs = get_local_size(0);

    // Performs the first step of the reduction while loading the data
    lm[lid] = input[lid] + input[lid + wgs];
    barrier(CLK_LOCAL_MEM_FENCE);

    // Performs reduction in local memory
    for (ulong s=wgs/2; s>0; s=s>>1) {
        if (lid < s)
            lm[lid] += lm[lid + s];
        
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Stores the final result
    if (lid == 0)
        sum[0] = lm[0];
}

void kernel prod_epilogue (const __global number* input, __global number* prod, __local number* lm) {
    const ulong lid = get_local_id(0);
    const ulong wgs = get_local_size(0);

    // Performs the first step of the reduction while loading the data
    lm[lid] = input[lid] * input[lid + wgs];
    barrier(CLK_LOCAL_MEM_FENCE);

    // Performs reduction in local memory
    for (ulong s=wgs/2; s>0; s=s>>1) {
        if (lid < s)
            lm[lid] *= lm[lid + s];
        
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Stores the final result
    if (lid == 0)
        prod[0] = lm[0];
}