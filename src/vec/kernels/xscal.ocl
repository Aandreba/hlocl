void kernel fscal_add (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = in[id] + scalar;
    }
}

void kernel fscal_sub (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = in[id] - scalar;
    }
}

void kernel fscal_sub_inv (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = scalar - in[id];
    }
}

void kernel fscal_mul (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = in[id] * scalar;
    }
}

void kernel fscal_div (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = in[id] / scalar;
    }
}

void kernel fscal_div_inv (const int n, const real scalar, __global const real* in, __global real* out) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        out[id] = scalar / in[id];
    }
}

// Assign
void kernel fscal_add_assign (const int n, const real scalar, __global real* vector) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        vector[id] += scalar;
    }
}

void kernel fscal_sub_assign (const int n, const real scalar, __global real* vector) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        vector[id] -= scalar;
    }
}

void kernel fscal_mul_assign (const int n, const real scalar, __global real* vector) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        vector[id] *= scalar;
    }
}

void kernel fscal_div_assign (const int n, const real scalar, __global real* vector) {
    for (int id = get_global_id(0); id<n; id += get_global_size(0)) {
        vector[id] /= scalar;
    }
}